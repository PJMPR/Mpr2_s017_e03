package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import domain.model.History;
import java.sql.ResultSet;

/**
 * Created by L on 05.11.2016.
 */
public class HistoryRepository extends RepositoryBase {

    String insertSql = "INSERT INTO history("
            + "date, amount, rate,"
            + " WALLET_FROM_ID,"
            + " WALLTET_TO_ID,"
            + "OPERATION_ID"
            + ") VALUES (?,?,?,?,?,?)";

    String selectByIdSql = "SELECT "
            + "id,"
            + "date,"
            + "amount,"
            + "rate,"
            + " WALLET_FROM_ID,"
            + " WALLTET_TO_ID,"
            + "OPERATION_ID"
            + " FROM history WHERE id=?";

    PreparedStatement insert;
    PreparedStatement selectById;

    public HistoryRepository(Connection connection) {
        super(connection);
        try {
			insert = connection.prepareStatement(insertSql);
			selectById = connection.prepareStatement(selectByIdSql);

		} catch (SQLException e) {
			e.printStackTrace();
		}
    }

    @Override
    protected String createTableSql() {
        return "" + "CREATE TABLE history("
                + "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY ,"
                + "date DATE,"
                + "amount DECIMAL,"
                + "rate DOUBLE,"
                + "WALLET_FROM_ID int,"
                + "WALLTET_TO_ID int,"
                + "OPERATION_ID int,"
                + "FOREIGN KEY (WALLET_FROM_ID) REFERENCES wallet(id),"
                + "FOREIGN KEY (WALLTET_TO_ID) REFERENCES wallet(id),"
                + "FOREIGN KEY (OPERATION_ID) REFERENCES operations(id)"
                + ")";
    }

    @Override
    protected String tableName() {
        return "History";

    }

    public void add(History history) {
        try {
            insert.setDate(1, history.getDate());
            insert.setDouble(2, history.getAmount());
            insert.setDouble(3, history.getRate());
            insert.setInt(4, history.getFromWalletId());
            insert.setInt(5, history.getToWalletId());
            insert.setInt(6, history.getOperationId());
            insert.executeUpdate();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    public History get(Integer id) {
        try {
            selectById.setInt(1, id);
            ResultSet rs = selectById.executeQuery();
            while (rs.next()) {
                History result = new History();
                result.setId(rs.getInt("id"));
                result.setDate(rs.getDate("date"));
                result.setAmount(rs.getFloat("amount"));
                result.setRate(rs.getDouble("rate"));
                result.setFromWalletId(rs.getInt("wallet_from_id"));
                result.setToWalletId(rs.getInt("wallet_to_id"));
                result.setOperationId(rs.getInt("operation_id"));
                return result;
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return null;

    }
}
