package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import domain.model.History;

public class HistoryRepository extends RepositoryBase{
	
	String insertSql = "INSERT INTO history(date) VALUES (?)";
	String selectByIdSql = "SELECT * FROM history WHERE id=?";
	String updateByIdSql = "UPDATE history SET DATE=? WHERE id=?";
	String deleteByIdSql = "DELETE FROM history where id=?";
	String getAllSql = "SELECT * FROM history";
			
	PreparedStatement insert;
	PreparedStatement selectById;
	PreparedStatement updateById;
	PreparedStatement deleteById;
	static PreparedStatement getAll; 

	public HistoryRepository(Connection connection) {
		super(connection);
		try {
			insert = connection.prepareStatement(insertSql);
			selectById = connection.prepareStatement(selectByIdSql);
			updateById = connection.prepareStatement(updateByIdSql);
			deleteById = connection.prepareStatement(deleteByIdSql);
			getAll = connection.prepareStatement(getAllSql);

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public void update(History history){
		 try {
			updateById.setDate(1, history.getDate());
		} catch (SQLException e) {
		      e.printStackTrace();
		}
}
	
	public void delete(History history){
		try{
		    deleteById.setInt(1, history.getId());
		}catch(Exception e) {
			  e.printStackTrace();
		}
}
	
	public static List <History> getAll(){
		List <History> list = new ArrayList<History>();
		try{
			ResultSet rs = getAll.executeQuery();
			while(rs.next()){
				History result = new History();
				result.setId(rs.getInt(1));
				list.add(result);
			}
	}catch(Exception e)
		{e.printStackTrace();}
		return list;
	}

	@Override
	protected String createTableSql() {
		return "" + "CREATE TABLE history("
				+ "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY ,"
				+ "date DATE," + "amount DECIMAL," + "rate DOUBLE,"
				+ "WALLET_FROM_ID int," + "WALLTET_TO_ID int,"
				+ "OPERATION_ID int,"
				+ "FOREIGN KEY (WALLET_FROM_ID) REFERENCES wallet(id),"
				+ "FOREIGN KEY (WALLTET_TO_ID) REFERENCES wallet(id),"
				+ "FOREIGN KEY (OPERATION_ID) REFERENCES operations(id)" + ")";
	}
	@Override
	protected String tableName() {
		return "History";

	}
}
