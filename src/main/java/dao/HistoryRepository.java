package dao;

import domain.model.History;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by L on 05.11.2016.
 */
public class HistoryRepository extends RepositoryBase {

    String insertSql = "INSERT INTO history("
            + "date, amount, rate,"
            + " WALLET_FROM_ID,"
            + " WALLET_TO_ID,"
            + "OPERATION_ID"
            + ") VALUES (?,?,?,?,?,?)";

    String selectByIdSql = "SELECT "
            + "id,"
            + "date,"
            + "amount,"
            + "rate,"
            + " WALLET_FROM_ID,"
            + " WALLET_TO_ID,"
            + "OPERATION_ID,"
            + " FROM history WHERE id=?";

    String deleteSql = "DELETE FROM History WHERE id=?";
    String getAllSql = "SELECT * FROM HISTORY";
    String updateSql = "UPDATE HISTORY SET (date, amount, rate, WALLET_FROM_ID" +
            ", WALLET_TO_ID, OPERATION_ID)= (?,?,?,?,?,?) WHERE id = ?";

    PreparedStatement insert;
    PreparedStatement selectById;
    PreparedStatement delete;
    PreparedStatement getAll;
    PreparedStatement update;

    public HistoryRepository(Connection connection) {
        super(connection);
        try {
            insert = connection.prepareStatement(insertSql);
            selectById = connection.prepareStatement(selectByIdSql);

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    protected String createTableSql() {
        return "" + "CREATE TABLE history("
                + "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY ,"
                + "date DATE,"
                + "amount DECIMAL,"
                + "rate DOUBLE,"
                + "WALLET_FROM_ID int,"
                + "WALLET_TO_ID int,"
                + "OPERATION_ID int,"
                + "FOREIGN KEY (WALLET_FROM_ID) REFERENCES wallet(id),"
                + "FOREIGN KEY (WALLET_TO_ID) REFERENCES wallet(id),"
                + "FOREIGN KEY (OPERATION_ID) REFERENCES operations(id)"
                + ")";
    }

    @Override
    protected String tableName() {
        return "History";

    }

    public void add(History history) {
        try {
            insert.setDate(1, history.getDate());
            insert.setDouble(2, history.getAmount());
            insert.setDouble(3, history.getRate());
            insert.setInt(4, history.getFromWalletId());
            insert.setInt(5, history.getToWalletId());
            insert.setInt(6, history.getOperationId());
            insert.executeUpdate();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    public History get(int id) {
        try {
            selectById.setInt(1, id);
            ResultSet rs = selectById.executeQuery();
            while (rs.next()) {
                History result = new History();
                result.setId(rs.getInt("id"));
                result.setDate(rs.getDate("date"));
                result.setAmount(rs.getFloat("amount"));
                result.setRate(rs.getDouble("rate"));
                result.setFromWalletId(rs.getInt("wallet_from_id"));
                result.setToWalletId(rs.getInt("wallet_to_id"));
                result.setOperationId(rs.getInt("operation_id"));
                return result;
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return null;

    }

    public void delete(int historyId) {
        try {
            delete.setInt(1, historyId);
            delete.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


    public List<History> getAll() {

        try {
            ResultSet resultSet = getAll.executeQuery();
            List<History> result = new ArrayList<History>();

            while (resultSet.next()) {
                History history = new History();
                history.setId(resultSet.getInt("id"));
                history.setDate(resultSet.getDate("date"));
                history.setAmount(resultSet.getFloat("amount"));
                history.setRate(resultSet.getDouble("rate"));
                history.setToWalletId(resultSet.getInt("WALLET_TO_ID"));
                history.setFromWalletId(resultSet.getInt("WALLET_FROM_ID"));
                history.setOperationId(resultSet.getInt("OPERATION_ID"));
                result.add(history);
            }
            return result;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    public void setUpdateScore(History history) {
        try {
            update.setDate(1, history.getDate());
            update.setFloat(2, history.getAmount());
            update.setDouble(3, history.getRate());
            update.setInt(4, history.getFromWalletId());
            update.setInt(5, history.getToWalletId());
            update.setInt(6, history.getOperationId());
            update.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
