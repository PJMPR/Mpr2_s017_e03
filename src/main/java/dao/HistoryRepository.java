package dao;

import dao.mappers.IMapResultSetIntoEntity;
import dao.repositories.IHistoryRepository;
import domain.model.History;
import domain.model.Operation;
import domain.model.Wallet;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

public class HistoryRepository extends RepositoryBase<History> implements IHistoryRepository {


    public HistoryRepository(Connection connection, IMapResultSetIntoEntity<History> mapper) {
        super(connection, mapper);

    }

    public List<History> of(Wallet wallet) {
        List<History> historiesOf = new ArrayList<History>();
        for (int i = 0; i < historiesOf.size(); i++) {
            if (historiesOf.get(i).equals(wallet)) {
                return historiesOf;
            }
        }
        return null;
    }

    public List<History> ofType(Operation operation) {
        List<History> historiesOfType = new ArrayList<History>();
        for (int i = 0; i < historiesOfType.size(); i++) {
            if (historiesOfType.get(i).equals(operation)) {
                return historiesOfType;
            }
        }
        return null;
    }

    public List<History> withDate(final Date from, Date to) {
        List<History> historiesWithDate = new ArrayList<History>();
        for (int i = 0; i < historiesWithDate.size(); i++) {
            List<History> histories = historiesWithDate.stream()
                    .filter(h -> h.getDate().after(from) && h.getDate().before(to))
                    .collect(Collectors.toList());
            return histories;
        }
        return null;
    }

    @Override
    protected String createTableSql() {
        return "" + "CREATE TABLE history("
                + "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY ,"
                + "date DATE,"
                + "amount DECIMAL,"
                + "rate DOUBLE,"
                + "WALLET_FROM_ID int,"
                + "WALLTET_TO_ID int,"
                + "OPERATION_ID int,"
                + "FOREIGN KEY (WALLET_FROM_ID) REFERENCES wallet(id),"
                + "FOREIGN KEY (WALLTET_TO_ID) REFERENCES wallet(id),"
                + "FOREIGN KEY (OPERATION_ID) REFERENCES operations(id)"
                + ")";
    }

    @Override
    protected String tableName() {
        return "History";

    }

    @Override
    protected String insertSql() {
        return "INSERT INTO history("
                + "date, amount, rate,"
                + " WALLET_FROM_ID,"
                + " WALLTET_TO_ID,"
                + "OPERATION_ID"
                + ") VALUES (?,?,?,?,?,?)";
    }

    @Override
    protected String updateSql() {
        return "UPDATE HISTORY SET (date, amount, rate, WALLET_FROM_ID" +
                ", WALLET_TO_ID, OPERATION_ID)= (?,?,?,?,?,?) WHERE id = ?";
    }

    @Override
    protected void setUpdate(History history) throws SQLException {
        update.setDate(1, history.getDate());
        update.setFloat(2, history.getAmount());
        update.setDouble(3, history.getRate());
        update.setInt(4, history.getFromWalletId());
        update.setInt(5, history.getToWalletId());

    }

    @Override
    protected void setInsert(History history) throws SQLException {
        insert.setDate(1, history.getDate());
        insert.setDouble(2, history.getAmount());
        insert.setDouble(3, history.getRate());
        insert.setInt(4, history.getFromWalletId());
        insert.setInt(5, history.getToWalletId());
    }
}
