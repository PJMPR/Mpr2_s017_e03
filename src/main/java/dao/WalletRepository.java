package dao;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javax.print.attribute.standard.PDLOverrideSupported;

import dao.mappers.IMapResultSetIntoEntity;
import domain.model.Person;
import domain.model.Wallet;

public class WalletRepository extends RepositoryBase<Wallet>{

	public WalletRepository(Connection connection, IMapResultSetIntoEntity<Wallet> mapper) {
		super(connection,mapper);
	}

	public List <Wallet> getAll(){

 		try{
 			ResultSet rs = selectAll.executeQuery();
 	 		List <Wallet> result = new ArrayList<Wallet>();
 			while(rs.next()){
 				Wallet wallet = new Wallet();
 				wallet.setId(rs.getInt(1));
 				wallet.setAccountID(rs.getInt(2));
 				wallet.setAsset(rs.getBigDecimal(3));
 				result.add(wallet);
 			}
 	return result;
	} catch (SQLException ex) {
		ex.printStackTrace();
	}
	return null;
}

	public Wallet get(int walletId){
		try{
			selectById.setInt(1, walletId);
			ResultSet rs = selectById.executeQuery();
			while(rs.next()){
				Wallet result = new Wallet();
				result.setId(rs.getInt("id"));
				result.setAccountID(rs.getInt("account id"));
				result.setAsset(rs.getBigDecimal("asset"));
				return result;
			}
		}catch(SQLException ex){
			ex.printStackTrace();
		}
		return null;
	}
		
		@Override
		protected String createTableSql() {
			return "CREATE TABLE wallet("
					+ "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY ,"
					+ "accountId int," + "asset DECIMAL," + "CURRENCY_ID int,"
					+ "PERSON_ID int,"
					+ "FOREIGN KEY (PERSON_ID) REFERENCES people(id),"
					+ "FOREIGN KEY (CURRENCY_ID) REFERENCES currency(id)" + ")";
		}

		@Override
		protected String tableName() {
			return "wallet";
		}
		
		protected String insertSql() {
			return "INSERT INTO wallet(AccountId, Asset) VALUES (?,?)";
		}
		
		protected String updateSql() {
			return "UPDATE wallet SET (AccountId, Asset)=(?,?) WHERE id=?";
		}
		
		@Override
		protected void setUpdate(Wallet entity) throws SQLException {
			update.setInt(1, entity.getAccountID());
			update.setBigDecimal(2, entity.getAsset());
			
		}

		@Override
		protected void setInsert(Wallet entity) throws SQLException {
			insert.setInt(1, entity.getAccountID());
			insert.setBigDecimal(2, entity.getAsset());
		}	
	}

