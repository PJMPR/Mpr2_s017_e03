package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import domain.model.Wallet;

/**
 * Created by L on 05.11.2016.
 */

public class WalletRepository extends RepositoryBase{
	
      String insertSql = "INSERT INTO wallet(accountId, asset) VALUES (?,?)";
      String selectByIdSql = "SELECT * FROM wallet WHERE id=?";
      String updateByIdSql = "UPDATE wallet SET ACCOUNTID=? WHERE id=?";
      String deleteByIdSql = "DELETE FROM wallet where id=?";
      String getAllSql = "SELECT * FROM wallet";
	
      PreparedStatement insert;
      PreparedStatement selectById;
      PreparedStatement updateById;
      PreparedStatement deleteById;
      static PreparedStatement getAll;

 	public WalletRepository(Connection connection) {
 		super(connection);
		try {
			insert = connection.prepareStatement(insertSql);
			selectById = connection.prepareStatement(selectByIdSql);
			updateById = connection.prepareStatement(updateByIdSql);
			deleteById = connection.prepareStatement(deleteByIdSql);
			getAll = connection.prepareStatement(getAllSql);

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public Wallet get(int walletId){
		try{
			selectById.setInt(1, walletId);
			ResultSet rs = selectById.executeQuery();
			while(rs.next()){
				Wallet result = new Wallet();
				result.setId(rs.getInt("id"));
				result.setAccountID(rs.getInt("account id"));
				result.setAsset(rs.getBigDecimal("asset"));
				return result;
			}
		}
		catch(SQLException ex){
			ex.printStackTrace();
		}
		return null;
		
	}
	
	public void add(Wallet wallet) {
		try {
			insert.setInt(1, wallet.getId());
			insert.setInt(2, wallet.getAccountID());
			insert.setBigDecimal(3, wallet.getAsset());
			insert.executeUpdate();
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
	}
	
	public void update(Wallet wallet){
		 try {
			updateById.setInt(1, wallet.getId());
			updateById.setInt(2, wallet.getAccountID());
			updateById.setBigDecimal(3, wallet.getAsset());
		} catch (SQLException e) {
		      e.printStackTrace();
		}
}
	
	public void delete(Wallet wallet){
		try{
		    deleteById.setInt(1, wallet.getId());
		    deleteById.setInt(2, wallet.getAccountID());
		    deleteById.setBigDecimal(3, wallet.getAsset());
		}catch(Exception e) {
			  e.printStackTrace();
		}
}

	public static List <Wallet> getAll(){
		 		List <Wallet> list = new ArrayList<Wallet>();
		 		try{
		 			ResultSet rs = getAll.executeQuery();
		 			while(rs.next()){
		 				Wallet result = new Wallet();
		 				result.setId(rs.getInt(1));
		 				result.setAccountID(rs.getInt(2));
		 				result.setAsset(rs.getBigDecimal(3));
		 				list.add(result);
		 			}
		 	}catch(Exception e)
		 		{e.printStackTrace();}
		 		return list;
		  	}

	@Override
	protected String createTableSql() {
		return "CREATE TABLE wallet("
				+ "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY ,"
				+ "accountId int," + "asset DECIMAL," + "CURRENCY_ID int,"
				+ "PERSON_ID int,"
				+ "FOREIGN KEY (PERSON_ID) REFERENCES people(id),"
				+ "FOREIGN KEY (CURRENCY_ID) REFERENCES currency(id)" + ")";
	}

	@Override
	protected String tableName() {
		return "wallet";
	}

}
