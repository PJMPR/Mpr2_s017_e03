package dao;

import domain.model.Operation;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
/**
 * Created by L on 05.11.2016.
 */
public class OperationRepository extends RepositoryBase{

	String insertSql = "INSERT INTO operations(name) VALUES (?)";
	String selectByIdSql = "SELECT * FROM operations WHERE id=?";
	String deleteSql = "DELETE FROM operations WHERE id=?";
	String getAllSql = "SELECT * FROM operations";
	String updateSql = " UPDATE operations SET name = ? WHERE id=?";

	PreparedStatement insert;
	PreparedStatement selectById;
	PreparedStatement delete;
	PreparedStatement getAll;
	PreparedStatement update;

	public OperationRepository(Connection connection) {
		super(connection);

		try {
			insert = connection.prepareStatement(insertSql);
			selectById = connection.prepareStatement(selectByIdSql);
			delete = connection.prepareStatement(deleteSql);
			getAll = connection.prepareStatement(getAllSql);
			update = connection.prepareStatement(updateSql);


		} catch (SQLException e) {
			e.printStackTrace();
		}
	}


	public void add(Operation operation) {

		try {
			insert.setString(1, operation.name());
			insert.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void delete(int operationId) {
		try {
			delete.setInt(1, operationId);
			delete.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}


	public void getAll() {

		try {
			ResultSet resultSet = getAll.executeQuery();
			while (resultSet.next()) {
				int op_id = resultSet.getInt("id");
				String op_name = resultSet.getString("name");
				System.out.println(op_id + " " + op_name);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}


	}


	public void setUpdate(int id, Operation name1) {

		try {
			update.setString(1, name1.name());
			update.setInt(2, id);
			update.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public Operation get(int operationId) {
		try {
			selectById.setInt(1, operationId);
			ResultSet resultSet = selectById.executeQuery();
			while (resultSet.next()) {
				return Operation.getByName(resultSet.getString("name"));
			}

		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}
		return null;
	}

	@Override
	protected String createTableSql() {
		return "" + "CREATE TABLE operations("
				+ "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
				+ "name varchar(10)," + ")";
	}

	@Override
	protected String tableName() {
		return "operations";
	}
}
